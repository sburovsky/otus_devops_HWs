
&НаКлиенте
Процедура ЗагрузитьJSON(Команда)
	ЗагрузитьJSONАсинх();
	 
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьJSONАсинх()
	Результат = Ждать ПоместитьФайлНаСерверАсинх( , , , 
			Новый ПараметрыДиалогаПомещенияФайлов("Выберите файл для загрузки", Ложь, "Файл json|*.json"), 
			УникальныйИдентификатор);
	Если Результат <> Неопределено И Не Результат.ПомещениеФайлаОтменено Тогда
		ЗагрузитьJSONНаСервере(Результат.Адрес);
		Сообщить("Обработка JSON завершена");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьJSONНаСервере(Адрес)
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	ПутьКФайлу = ПолучитьИмяВременногоФайла("json");
	Данные.Записать(ПутьКФайлу);
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	
	Попытка
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		
	Исключение
		Сообщить("Ошибка чтения: " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки; 
	
	Если ДанныеJSON.Свойство("data") Тогда
		Свойства = новый Массив;
		Свойства.Добавить("code");
		Свойства.Добавить("name");
		Свойства.Добавить("organization_code");
		Свойства.Добавить("count");
		Свойства.Добавить("stock_code");
		Индекс = 0;
		Для каждого ЭлементМассива Из ДанныеJSON.data Цикл 
			Индекс = Индекс + 1;
			ТекстОшибки = "";
			Если ПроверитьНаличиеСвойств(ЭлементМассива, Свойства, ТекстОшибки) Тогда
				ЭлНоменклатура = ПолучитьЭлементСправочника(ЭлементМассива.code);
				ЭлНоменклатура.Наименование = ЭлементМассива.name; 
				ЭлНоменклатура.ОрганизацияКод = ЭлементМассива.organization_code; 
				ЭлНоменклатура.Количество = ЭлементМассива.count; 
				ЭлНоменклатура.СкладКод = ЭлементМассива.stock_code;
				Попытка
					ЭлНоменклатура.записать();
				Исключение                                                                           
					Сообщить("Ошибка записи: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
			Иначе
				Сообщить(СтрШаблон("Ошибка чтения строки %1: %2", Индекс,ТекстОшибки), СтатусСообщения.Важное);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщить("Отсутствуют данные для загрузки", СтатусСообщения.Важное);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ПутьКФайлу);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементСправочника(Код)
	
	ПозицияНоменклатуры = Справочники.Номенклатура.НайтиПоКоду(Код);
	Если Не ПозицияНоменклатуры.Пустая() Тогда
		Возврат ПозицияНоменклатуры.ПолучитьОбъект();
	Иначе
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйЭлемент.Код = Код;
		Возврат НовыйЭлемент; 
	КонецЕсли;
КонецФункции  

&НаСервере
Функция ПроверитьНаличиеСвойств(пДанные, МассивПроверяемыхЭлементов, ТекстОшибки)  
	
	Если Не ЭтоКоллекцияКлючИЗначение(ТипЗнч(пДанные)) Тогда
		ТекстОшибки = "Ожидается коллекция типа 'Ключ/Значение'";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	Для каждого Элемент Из МассивПроверяемыхЭлементов Цикл
		Если Не пДанные.Свойство(Элемент) Тогда 
			ТекстОшибки = ТекстОшибки + СтрШаблон("Не обнаружен элемент <%1>.", Элемент) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустаяСтрока(ТекстОшибки);
КонецФункции

&НаСервере
Функция ЭтоКоллекцияКлючИЗначение(ТипДанных)
	
	Возврат (ТипДанных = Тип("Соответствие"))
		Или (ТипДанных = Тип("Структура"))
		Или (ТипДанных = Тип("ФиксированноеСоответствие"))
		Или (ТипДанных = Тип("ФиксированнаяСтруктура"));
			
КонецФункции


&НаСервереБезКонтекста
Процедура ЗаполнитьВнешнийИсточникДанныхНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Код КАК _code,
	               |	Номенклатура.Наименование КАК _name,
	               |	Номенклатура.ОрганизацияКод КАК _organization_code,
	               |	Номенклатура.СкладКод КАК _stock_code,
	               |	Номенклатура.Количество КАК _count
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйОбъект = ВнешниеИсточникиДанных.Otus_Devops_07_23_native_eds.Таблицы.Otus_Devops_07_23_native_eds_public__nomenclature.СоздатьОбъект();
		
		ЗаполнитьЗначенияСвойств(НовыйОбъект, Выборка);
		Попытка
      		НовыйОбъект.Записать();
		Исключение
			Сообщить("Ошибка записи: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьВнешнийИсточникДанных(Команда)
	
	ЗаполнитьВнешнийИсточникДанныхНаСервере();
	Сообщить("Обработка внешнего источника завершена");

КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗапросКGoogle(Команда) 
	Если ПроверитьЗаполнение() Тогда
		Попытка
			WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			Адрес = СтрШаблон("https://www.googleapis.com/books/v1/volumes?q=%1&key=%2", ПараметрыПоиска, КлючAPI);
			WinHttp.Open("GET", Адрес, Ложь);
			WinHttp.Send();
		Исключение
			Сообщить("Ошибка работы с WinHttp: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		СтатусЗапроса = WinHttp.Status;
		РезультатЗапроса = WinHttp.ResponseText;
	КонецЕсли;
КонецПроцедуры

